{{ form_start(form, {'attr': {'class': 'form needs-validation', 'novalidate': 'novalidate', 'id': 'reservation-form'}}) }}
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label class="form-control-label font-weight-bold" for="{{ form.event.vars.id }}">
                    <i class="fas fa-calendar-alt text-primary me-2"></i>
                    {{ form_label(form.event) }} <span class="text-danger">*</span>
                </label>
                {{ form_widget(form.event, {'attr': {
                    'class': 'form-control form-control-lg border-0 shadow-sm',
                    'style': 'border-radius: 10px; background-color: #f8f9fa;'
                }}) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.event) }}
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label class="form-control-label font-weight-bold" for="{{ form.user.vars.id }}">
                    <i class="fas fa-user text-primary me-2"></i>
                    {{ form_label(form.user) }} <span class="text-danger">*</span>
                </label>
                {{ form_widget(form.user, {'attr': {
                    'class': 'form-control form-control-lg border-0 shadow-sm',
                    'style': 'border-radius: 10px; background-color: #f8f9fa;'
                }}) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.user) }}
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label class="form-control-label font-weight-bold" for="{{ form.date.vars.id }}">
                    <i class="fas fa-clock text-primary me-2"></i>
                    {{ form_label(form.date) }} <span class="text-danger">*</span>
                </label>
                {{ form_widget(form.date, {'attr': {
                    'class': 'form-control form-control-lg border-0 shadow-sm',
                    'style': 'border-radius: 10px; background-color: #f8f9fa;'
                }}) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.date) }}
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label class="form-control-label font-weight-bold" for="{{ form.status.vars.id }}">
                    <i class="fas fa-tag text-primary me-2"></i>
                    {{ form_label(form.status) }} <span class="text-danger">*</span>
                </label>
                <div class="status-selector">
                    {{ form_widget(form.status, {'attr': {
                        'class': 'form-select-hidden',
                        'style': 'position: absolute; opacity: 0; height: 0;'
                    }}) }}
                    <div class="status-options form-control form-control-lg border-0 shadow-sm" style="border-radius: 10px; background-color: #f8f9fa; padding: 0.75rem; display: flex; gap: 0.75rem;">
                        <div class="status-option pending" data-value="pending">
                            <span class="badge bg-gradient-warning rounded-pill px-3 py-2">En attente</span>
                        </div>
                        <div class="status-option approved" data-value="approved">
                            <span class="badge bg-gradient-success rounded-pill px-3 py-2">Approuvé</span>
                        </div>
                        <div class="status-option rejected" data-value="rejected">
                            <span class="badge bg-gradient-danger rounded-pill px-3 py-2">Rejeté</span>
                        </div>
                        <div class="status-option cancelled" data-value="cancelled">
                            <span class="badge bg-gradient-secondary rounded-pill px-3 py-2">Annulé</span>
                        </div>
                    </div>
                </div>
                <div class="invalid-feedback">
                    {{ form_errors(form.status) }}
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mb-4">
        <div class="col-12">
            <div class="form-group mb-3">
                <label class="form-control-label font-weight-bold" for="{{ form.comment.vars.id }}">
                    <i class="fas fa-comment text-primary me-2"></i>
                    {{ form_label(form.comment) }}
                </label>
                {{ form_widget(form.comment, {'attr': {
                    'class': 'form-control form-control-lg border-0 shadow-sm',
                    'style': 'border-radius: 10px; background-color: #f8f9fa; resize: none;',
                    'rows': 5
                }}) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.comment) }}
                </div>
            </div>
        </div>
    </div>
    
    <div class="mt-4 mb-3">
        <p><small class="text-danger fw-bold">* Champs obligatoires</small></p>
    </div>
    
    <div class="d-flex justify-content-between align-items-center mt-5">
        <a href="{{ path('app_reservation_index') }}" class="btn btn-outline-secondary btn-lg px-4">
            <i class="fas fa-arrow-left me-2"></i> Retour à la liste
        </a>
        <button type="submit" class="btn btn-primary btn-lg px-5 shadow-sm" id="btn-submit-reservation">
            <i class="fas fa-save me-2"></i> {{ button_label|default('Enregistrer') }}
        </button>
    </div>
{{ form_end(form) }}

<!-- Sweet Alert -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.18/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.18/dist/sweetalert2.all.min.js"></script>

<script>
// Validation du formulaire côté client
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('reservation-form');
    
    // Gérer la sélection visuelle du statut
    const statusSelect = document.getElementById('{{ form.status.vars.id }}');
    const statusOptions = document.querySelectorAll('.status-option');
    
    // S'assurer que le statut par défaut est "pending" (en attente) si c'est une nouvelle réservation
    if (statusSelect.value === '' || !statusSelect.value) {
        statusSelect.value = 'pending';
    }
    
    // Sélectionner l'option correspondant à la valeur actuelle
    statusOptions.forEach(option => {
        if (option.dataset.value === statusSelect.value) {
            option.classList.add('selected');
        }
        
        option.addEventListener('click', function() {
            // Enlever la classe selected de toutes les options
            statusOptions.forEach(opt => opt.classList.remove('selected'));
            // Ajouter la classe selected à l'option cliquée
            this.classList.add('selected');
            // Mettre à jour la valeur du select
            statusSelect.value = this.dataset.value;
        });
    });
    
    // Si aucune option n'est sélectionnée (nouveau formulaire), sélectionner "en attente"
    if (!document.querySelector('.status-option.selected')) {
        document.querySelector('.status-option[data-value="pending"]').classList.add('selected');
        statusSelect.value = 'pending';
    }
    
    form.addEventListener('submit', function(event) {
        if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
            
            Swal.fire({
                icon: 'error',
                title: 'Formulaire incomplet',
                text: 'Veuillez remplir tous les champs obligatoires.',
                confirmButtonColor: '#e6304a'
            });
        }
        
        form.classList.add('was-validated');
    });
    
    // Ajout d'effets visuels sur les inputs focus
    const inputs = document.querySelectorAll('.form-control');
    inputs.forEach(input => {
        input.addEventListener('focus', function() {
            this.style.boxShadow = '0 0 0 0.25rem rgba(230, 48, 74, 0.25)';
            this.style.borderColor = '#e6304a';
        });
        
        input.addEventListener('blur', function() {
            this.style.boxShadow = '';
            this.style.borderColor = '';
        });
    });
});
</script>

<style>
.status-option {
    cursor: pointer;
    transition: transform 0.2s, opacity 0.2s;
    opacity: 0.6;
}
.status-option:hover {
    transform: translateY(-2px);
    opacity: 0.9;
}
.status-option.selected {
    transform: translateY(-2px);
    opacity: 1;
    position: relative;
}
.status-option.selected:after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 50%;
    transform: translateX(-50%);
    width: 8px;
    height: 8px;
    background-color: #e6304a;
    border-radius: 50%;
}
</style> 