{% extends 'base.html.twig' %}

{% block title %}Sign In - Soccer{% endblock %}



{% block body %}
    <div class="hero overlay d-flex align-items-center" style="background-image: url('{{ asset('assets/images/bg_3.jpg') }}'); min-height: calc(100vh - 120px); padding-top: 300px; padding-bottom: 110px;">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-5 col-md-7 col-12">
                    <div class="card glass-card border-0 rounded-3 shadow-sm p-3 mb-4" style="max-width: 450px; margin: 0 auto;">
                        <div class="card-header bg-transparent text-center py-2 border-0">
                            <h3 class="font-weight-bold text-dark mb-1">Sign In</h3>
                            <p class="mb-0 text-muted">Enter your credentials</p>
                        </div>
                        <div class="card-body p-3">
                            {% if error %}
                                <div class="alert alert-danger text-center mb-3">{{ error.messageKey|trans(error.messageData, 'reset_password') }}</div>
                            {% endif %}

                            <!-- Face Recognition Login -->
                            <div class="face-login-container text-center mb-4">
                                <button type="button" class="btn btn-face-login w-100 mb-3" id="faceLoginBtn">
                                    <i class="fas fa-user-circle me-2"></i>Sign in with Face Recognition
                                </button>
                                <div class="face-capture-container d-none">
                                    <div class="camera-frame mb-4">
                                        <div class="camera-overlay">
                                            <div class="face-guide"></div>
                                        </div>
                                        <video id="loginVideo" width="320" height="240" autoplay muted playsinline></video>
                                        <canvas id="loginCanvas" width="320" height="240" class="d-none"></canvas>
                                        <img id="loginPhoto" class="preview-image d-none" alt="Your face">
                                    </div>
                                    <div class="camera-controls">
                                        <button type="button" class="btn-camera" id="startLoginCamera">
                                            <i class="fas fa-video"></i>
                                            <span>Start</span>
                                        </button>
                                        <button type="button" class="btn-camera btn-capture" id="captureLogin">
                                            <i class="fas fa-camera"></i>
                                            <span>Capture</span>
                                        </button>
                                        <button type="button" class="btn-camera btn-stop" id="stopLoginCamera">
                                            <i class="fas fa-stop"></i>
                                            <span>Stop</span>
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- Regular Login Form -->
                            <form method="post" action="{{ path('app_log_in') }}">
                                <div class="mb-3">
                                    <label for="inputEmail" class="form-label">Email</label>
                                    <input name="email" type="email" class="form-control rounded-pill" id="inputEmail" placeholder="Email" value="{{ last_username }}" required autofocus>
                                </div>
                                <div class="mb-3 position-relative">
                                    <label for="inputPassword" class="form-label d-flex justify-content-between">
                                        <span>Password</span>
                                        <a href="{{ path('app_forgot_password_request') }}" class="text-info small fw-bold">Forgot password?</a>
                                    </label>
                                    <input name="password" type="password" class="form-control rounded-pill pe-5" id="inputPassword" placeholder="Password" required>
                                    <span class="position-absolute" style="top: 42px; right: 20px; cursor: pointer;" onclick="togglePassword()">
                                        <i class="fa fa-eye" id="togglePasswordIcon"></i>
                                    </span>
                                </div>

                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="checkbox" id="rememberMe" name="_remember_me" checked>
                                    <label class="form-check-label" for="rememberMe">Remember me</label>
                                </div>
                                <input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">
                                <div class="d-grid mt-4">
                                    <button type="submit" class="btn btn-info btn-block rounded-pill py-2">Sign In</button>
                                </div>
                            </form>

                            <!-- Divider -->
                            <div class="divider d-flex align-items-center my-4">
                                <span class="divider-line flex-grow-1"></span>
                                <span class="px-3 text-muted small">OR SIGN IN WITH</span>
                                <span class="divider-line flex-grow-1"></span>
                            </div>

                            <!-- Social Login Buttons -->
                            <div class="social-login d-flex justify-content-center gap-3 mb-2">
                                <a href="{{ path('connect_google_start') }}" class="btn btn-social rounded-circle d-flex align-items-center justify-content-center">
                                    <img src="{{ asset('assets/images/icons/google.svg') }}" alt="Google" width="20" height="20" onerror="this.src='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/icons/google.svg';">
                                </a>
                                <a class="btn btn-social rounded-circle d-flex align-items-center justify-content-center">
                                    <img src="{{ asset('assets/images/icons/facebook.svg') }}" alt="Facebook" width="20" height="20" onerror="this.src='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/icons/facebook.svg';">
                                </a>

                            </div>
                        </div>
                        <div class="card-footer bg-transparent text-center border-0 pt-0 pb-2">
                            <p class="mb-0 text-muted">Don't have an account?
                                <a href="{{ path('app_sign_up') }}" class="text-info font-weight-bold">Sign Up</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <style>
        .glass-card {
            background: rgba(255, 255, 255, 0.85);
            backdrop-filter: blur(8px) saturate(120%);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.10);
            border-radius: 1.5rem;
            border: 1px solid rgba(255,255,255,0.18);
            position: relative;
            z-index: 10;
        }

        .glass-card .form-label {
            color: #222;
            font-weight: 600;
            font-size: 0.85rem;
            margin-bottom: 0.2rem;
        }

        .glass-card .form-control {
            background: #f7f7f9;
            border: 1px solid #e3e3e3;
            font-size: 0.9rem;
            padding: 0.45rem 1rem;
            color: #222 !important;
            box-shadow: none;
            transition: border-color 0.2s;
        }

        .glass-card .form-control:focus {
            border-color: #fd7e14;
            background: #fff;
            color: #222;
            box-shadow: 0 0 0 0.15rem rgba(253,126,20,0.10);
        }

        .glass-card .form-control::placeholder {
            color: #888;
            opacity: 1;
        }

        .glass-card .btn-info {
            background: linear-gradient(90deg, #ff8800 0%, #fd7e14 100%);
            border: none;
            color: #fff;
            font-weight: 600;
            letter-spacing: 0.03em;
            box-shadow: 0 2px 8px rgba(253,126,20,0.10);
            transition: all 0.2s;
        }

        .glass-card .btn-info:hover {
            background: linear-gradient(90deg, #fd7e14 0%, #ff8800 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(253,126,20,0.20);
        }

        /* Social login buttons styling */
        .btn-social {
            width: 50px;
        }

        .btn-social:hover {
            background-color: #e9ecef;
            transform: translateY(-2px);
        }

        /* Face Recognition Styles */
        .btn-face-login {
            background: linear-gradient(45deg, #e41b23, #ff4d54);
            color: white;
            border: none;
            padding: 14px 28px;
            border-radius: 12px;
            font-weight: 600;
            box-shadow: 0 4px 15px rgba(228, 27, 35, 0.2);
            transition: all 0.3s ease;
        }

        .btn-face-login:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(228, 27, 35, 0.3);
            color: white;
            background: linear-gradient(45deg, #ff4d54, #e41b23);
        }

        .face-capture-container {
            background: #ffffff;
            border-radius: 16px;
            padding: 24px;
            margin-top: 20px;
            box-shadow: 0 8px 24px rgba(0,0,0,0.08);
        }

        .camera-frame {
            position: relative;
            width: 100%;
            max-width: 320px;
            margin: 0 auto;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 8px 24px rgba(0,0,0,0.12);
        }

        .camera-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
            pointer-events: none;
        }

        .face-guide {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 200px;
            height: 200px;
            border: 3px solid rgba(228, 27, 35, 0.5);
            border-radius: 50%;
            box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.3);
        }

        #loginVideo, #loginCanvas {
            width: 100%;
            height: auto;
            display: block;
            transform: scaleX(-1); /* Mirror effect */
            background: #000;
        }

        .preview-image {
            width: 100%;
            height: auto;
            border-radius: 16px;
            display: block;
        }

        .camera-controls {
            display: flex;
            justify-content: center;
            gap: 16px;
            margin-top: 20px;
        }

        .btn-camera {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 12px;
            border: none;
            border-radius: 12px;
            background: #f8f9fa;
            color: #495057;
            transition: all 0.2s ease;
            min-width: 80px;
        }

        .btn-camera i {
            font-size: 1.2rem;
            margin-bottom: 6px;
        }

        .btn-camera span {
            font-size: 0.85rem;
            font-weight: 500;
        }

        .btn-camera:hover {
            transform: translateY(-2px);
            background: #e9ecef;
        }

        .btn-capture {
            background: #e41b23;
            color: white;
        }

        .btn-capture:hover {
            background: #ff4d54;
        }

        .btn-stop {
            background: #dc3545;
            color: white;
        }

        .btn-stop:hover {
            background: #ff4d54;
        }

        /* Status Alert Styles */
        .alert {
            border-radius: 12px;
            padding: 16px;
            margin-top: 16px;
            border: none;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        }
    </style>
    <script defer src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js"></script>

    <script defer src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js"></script>
    <script>
        // Toggle password visibility
        function togglePassword() {
            const passwordInput = document.getElementById('inputPassword');
            const icon = document.getElementById('togglePasswordIcon');
            if (passwordInput.type === "password") {
                passwordInput.type = "text";
                icon.classList.replace("fa-eye", "fa-eye-slash");
            } else {
                passwordInput.type = "password";
                icon.classList.replace("fa-eye-slash", "fa-eye");
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            console.log('✅ DOM loaded: Starting Face Recognition Script');

            // Elements
            const faceLoginBtn         = document.getElementById('faceLoginBtn');
            const faceCaptureContainer = document.querySelector('.face-capture-container');
            const video                = document.getElementById('loginVideo');
            const canvas               = document.getElementById('loginCanvas');
            const photo                = document.getElementById('loginPhoto');
            const startButton          = document.getElementById('startLoginCamera');
            const captureButton        = document.getElementById('captureLogin');
            const stopButton           = document.getElementById('stopLoginCamera');
            const FACE_LOGIN_URL       = "{{ path('app_face_login') }}";

            // Status div
            const statusDiv = document.createElement('div');
            statusDiv.className = 'alert alert-info mt-3 d-none';
            faceCaptureContainer.appendChild(statusDiv);

            let stream = null;
            let modelsLoaded = false;

            // 1) Reveal the face-capture UI
            faceLoginBtn.addEventListener('click', () => {
                console.log('👤 Face login button clicked');
                faceCaptureContainer.classList.remove('d-none');
                faceLoginBtn.classList.add('d-none');
                statusDiv.classList.remove('d-none');
            });

            // 2) Load models on demand
            async function loadModels() {
                try {
                    statusDiv.className = 'alert alert-info mt-3';
                    statusDiv.textContent = 'Loading face recognition models...';

                    await faceapi.nets.tinyFaceDetector.loadFromUri('/models/tiny_face_detector');
                    await faceapi.nets.faceLandmark68Net.loadFromUri('/models/face_landmark_68');
                    await faceapi.nets.faceRecognitionNet.loadFromUri('/models/face_recognition');

                    modelsLoaded = true;
                    statusDiv.className = 'alert alert-success mt-3';
                    statusDiv.textContent = 'Face recognition ready!';
                    setTimeout(() => statusDiv.classList.add('d-none'), 2000);
                    return true;
                } catch (err) {
                    console.error('❌ Error loading models:', err);
                    statusDiv.className = 'alert alert-danger mt-3';
                    statusDiv.textContent = 'Error loading face recognition. Please refresh the page.';
                    return false;
                }
            }

            // 3) Start camera
            startButton.addEventListener('click', () => {
                (async () => {
                    statusDiv.className = 'alert alert-info mt-3';
                    statusDiv.textContent = 'Requesting camera access…';

                    if (!modelsLoaded) {
                        if (!await loadModels()) return;
                    }

                    try {
                        if (stream) {
                            stream.getTracks().forEach(t => t.stop());
                        }
                        stream = await navigator.mediaDevices.getUserMedia({ video: true });
                        video.srcObject = stream;
                        await video.play();

                        // Show video, hide previous preview
                        video.style.display  = 'block';
                        canvas.style.display = 'none';
                        photo.style.display  = 'none';

                        statusDiv.className = 'alert alert-success mt-3';
                        statusDiv.textContent = 'Camera started. Position your face in the frame.';
                    } catch (err) {
                        console.error('Camera error:', err);
                        statusDiv.className = 'alert alert-danger mt-3';
                        statusDiv.textContent = `Camera error: ${err.message}`;
                    }
                })().catch(err => {
                    console.error('Unexpected in start-camera handler:', err);
                    statusDiv.className = 'alert alert-danger mt-3';
                    statusDiv.textContent = `Unexpected error: ${err.message}`;
                });
            });

            // 4) Capture + recognize + send to backend
            captureButton.addEventListener('click', async function () {
                if (!stream) {
                    statusDiv.className = 'alert alert-warning mt-3';
                    statusDiv.textContent = 'Please start the camera first';
                    return;
                }

                statusDiv.className = 'alert alert-info mt-3';
                statusDiv.textContent = 'Processing face detection...';

                try {
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    const context = canvas.getContext('2d');
                    context.drawImage(video, 0, 0);

                    const detections = await faceapi
                        .detectAllFaces(canvas, new faceapi.TinyFaceDetectorOptions({
                            inputSize: 512,
                            scoreThreshold: 0.5
                        }))
                        .withFaceLandmarks()
                        .withFaceDescriptors();

                    if (detections.length === 0) {
                        statusDiv.className = 'alert alert-warning mt-3';
                        statusDiv.textContent = 'No face detected. Please try again.';
                        return;
                    }

                    // Process detection
                    const descriptor = detections[0].descriptor;
                    const imageData = canvas.toDataURL('image/jpeg');
                    
                    // Show preview
                    photo.src = imageData;
                    video.style.display = 'none';
                    photo.style.display = 'block';
                    statusDiv.textContent = 'Processing face recognition...';

                    // Debug info
                    console.log('Sending descriptor:', Array.from(descriptor));
                    
                    const response = await fetch('{{ path("app_face_login") }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({
                            image: imageData,
                            descriptor: Array.from(descriptor)
                        }),
                        credentials: 'include' // Important for sessions
                    });

                    // First check if response is OK
                    if (!response.ok) {
                        const errorText = await response.text();
                        try {
                            // Try to parse as JSON
                            const errorData = JSON.parse(errorText);
                            throw new Error(errorData.message || 'Request failed');
                        } catch {
                            // If not JSON, show raw error
                            throw new Error(`Server error: ${errorText}`);
                        }
                    }

                    const data = await response.json();

                    if (data.success) {
                        statusDiv.className = 'alert alert-success mt-3';
                        statusDiv.textContent = '✅ Face recognized! Redirecting...';
                        window.location.href = data.redirectUrl;
                    } else {
                        statusDiv.className = 'alert alert-danger mt-3';
                        statusDiv.textContent = data.message || 'Recognition failed. Try again or use email login.';
                    }
                } catch (error) {
                    console.error('❌ Face detection error:', error);
                    statusDiv.className = 'alert alert-danger mt-3';
                    statusDiv.textContent = error.message || 'Error processing face. Please try again.';
                }
            });

            // 5) Stop camera
            stopButton.addEventListener('click', () => {
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                    stream = null;
                }
                video.srcObject = null;
                video.style.display = 'none';
                statusDiv.className = 'alert alert-info mt-3';
                statusDiv.textContent = 'Camera stopped';
            });

            // 6) Cleanup
            window.addEventListener('beforeunload', () => {
                if (stream) stream.getTracks().forEach(t => t.stop());
            });
        });
    </script>
{% endblock %}