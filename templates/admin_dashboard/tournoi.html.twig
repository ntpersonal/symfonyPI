{% extends 'admin_dashboard/dashboard.html.twig' %}

{% block title %}Tables - Soft UI Dashboard 3{% endblock %}

{% block stylesheets %}
  {{ parent() }}
  <!--     Fonts and icons     -->
  <link href="https://fonts.googleapis.com/css?family=Inter:300,400,500,600,700,800" rel="stylesheet" />
  <!-- Nucleo Icons -->
  <link href="https://demos.creative-tim.com/soft-ui-dashboard/assets/css/nucleo-icons.css" rel="stylesheet" />
  <link href="https://demos.creative-tim.com/soft-ui-dashboard/assets/css/nucleo-svg.css" rel="stylesheet" />
  <!-- Font Awesome Icons -->
  <script src="https://kit.fontawesome.com/42d5adcbca.js" crossorigin="anonymous"></script>
  <!-- CSS Files -->
  <link id="pagestyle" href="{{ asset('assets/css/soft-ui-dashboard.css?v=1.1.0') }}" rel="stylesheet" />
{% endblock %}

{% block body %}
  
  <main class="main-content position-relative max-height-vh-100 h-100 border-radius-lg ">
   
    <div class="container-fluid py-4">
      
      <div class="row">
        <div class="col-12">
          <div class="card mb-4">
          <div class="card-header pb-0 d-flex justify-content-between align-items-center">
              <h6 class="mb-0">Tourment table</h6>
              <a class="btn btn-success btn-sm" href="javascript:void(0);"  id="addTournoiButton">Add</a>
            </div>
            <div class="card-body px-0 pt-0 pb-2">
              <div class="table-responsive p-0">
                <table class="table align-items-center justify-content-center mb-0">
                  <thead>
                    <tr>
                      <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Tourment Name</th>
                      <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">format</th>
                      <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">sportType</th>
                      <th class="text-uppercase text-secondary text-xxs font-weight-bolder text-center opacity-7 ps-2">nbEquipe</th>
                      <th class="text-uppercase text-secondary text-xxs font-weight-bolder text-center opacity-7 ps-2">Status</th>
                      <th class="text-uppercase text-secondary text-xxs font-weight-bolder text-center opacity-7 ps-2">Edit</th>
                      <th class="text-uppercase text-secondary text-xxs font-weight-bolder text-center opacity-7 ps-2">Delete</th>
                      
                      <th></th>
                    </tr>
                  </thead>
                  <tbody>
                  {% for tournoi in tournois %}
                    <tr>
                      <td>
                        <div class="d-flex px-2">
                          <div>
                            <img src="{{ asset('assets/images/small-logos/logo-spotify.svg') }}" class="avatar avatar-sm rounded-circle me-2" alt="spotify">
                          </div>
                          <div class="my-auto">
                            <h6 class="mb-0 text-sm">{{ tournoi.nom }}</h6>
                          </div>
                        </div>
                      </td>
                      <td>
                        <p class="text-sm font-weight-bold mb-0">{{tournoi.format }}</p>
                      </td>
                      <td>
                        <span class="text-xs font-weight-bold">{{ tournoi.sportType }}</span>
                      </td>
                      <td class="text-center">
                        <p class="text-sm font-weight-bold mb-0">{{ tournoi.nbEquipe }}</p>
                        </td>
                        <td class="text-center">
                        <span class="text-xs font-weight-bold">{{ tournoi.status }}</span>
                        </td>
                        <td class="align-middle text-center">
                        <a class="btn btn-warning btn-sm edit-tournoi" href="javascript:void(0);" 
                           data-tournoi-id="{{ tournoi.id }}" 
                           data-tournoi-nom="{{ tournoi.nom }}"
                           data-tournoi-format="{{ tournoi.format }}"
                           data-tournoi-sporttype="{{ tournoi.sportType }}"
                           data-tournoi-nbequipe="{{ tournoi.nbEquipe }}"
                           data-tournoi-status="{{ tournoi.status }}">Edit</a>
                        </td>
                        <td class="align-middle text-center">
                        <a class="btn btn-danger btn-sm delete-tournoi" href="javascript:void(0);" 
                           data-tournoi-id="{{ tournoi.id }}" 
                           data-tournoi-nom="{{ tournoi.nom }}">Delete</a>
                        </td>
                    </tr>
                    {% endfor %}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Delete Confirmation Modal -->
  <div class="modal fade" id="deleteTournoiModal" tabindex="-1" role="dialog" aria-labelledby="deleteTournoiModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="deleteTournoiModalLabel">Confirm Delete</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          Are you sure you want to delete the tournament "<span id="tournoiName"></span>"?
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirmDeleteTournoi">Delete</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Tournoi Modal -->
  <div class="modal fade" id="editTournoiModal" tabindex="-1" role="dialog" aria-labelledby="editTournoiModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editTournoiModalLabel">Edit Tournament</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editTournoiForm">
            <input type="hidden" id="editTournoiId">
            <div class="mb-3">
              <label for="editTournoiName" class="form-label">Tournament Name</label>
              <input type="text" class="form-control" id="editTournoiName" required>
            </div>
            <div class="mb-3">
              <label for="editTournoiFormat" class="form-label">Format</label>
              <input type="text" class="form-control" id="editTournoiFormat" required>
            </div>
            <div class="mb-3">
              <label for="editTournoiSportType" class="form-label">Sport Type</label>
              <input type="text" class="form-control" id="editTournoiSportType" required>
            </div>
            <div class="mb-3">
              <label for="editTournoiNbEquipe" class="form-label">Number of Teams</label>
              <input type="number" class="form-control" id="editTournoiNbEquipe" required>
            </div>
            <div class="mb-3">
              <label for="editTournoiStatus" class="form-label">Status</label>
              <select class="form-control" id="editTournoiStatus" required>
                <option value="Pending">Pending</option>
                <option value="In Progress">In Progress</option>
                <option value="Completed">Completed</option>
                <option value="Cancelled">Cancelled</option>
              </select>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="saveTournoiChanges">Save Changes</button>
        </div>
      </div>
    </div>
  </div>
  <!-- Add Tournoi Modal -->
<div class="modal fade" id="addTournoiModal" tabindex="-1" role="dialog" aria-labelledby="addTournoiModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addTournoiModalLabel">Add New Tournament</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addTournoiForm">
                    <div class="mb-3">
                        <label for="addTournoiName" class="form-label">Tournament Name</label>
                        <input type="text" class="form-control" id="addTournoiName" name="nom" required>
                    </div>
                    <div class="mb-3">
                        <label for="addTournoiFormat" class="form-label">Format</label>
                        <input type="text" class="form-control" id="addTournoiFormat" name="format" required>
                    </div>
                    <div class="mb-3">
                        <label for="addTournoiSportType" class="form-label">Sport Type</label>
                        <input type="text" class="form-control" id="addTournoiSportType" name="sportType" required>
                    </div>
                    <div class="mb-3">
                        <label for="addTournoiNbEquipe" class="form-label">Number of Teams</label>
                        <input type="number" class="form-control" id="addTournoiNbEquipe" name="nbEquipe" required>
                    </div>
                    <div class="mb-3">
                        <label for="addTournoiStatus" class="form-label">Status</label>
                        <select class="form-control" id="addTournoiStatus" name="status" required>
                            <option value="Pending">Pending</option>
                            <option value="In Progress">In Progress</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="addTournoiStartDate" class="form-label">Start Date</label>
                        <input type="date" class="form-control" id="addTournoiStartDate" name="start_date" required>
                    </div>
                    <div class="mb-3">
                        <label for="addTournoiEndDate" class="form-label">End Date</label>
                        <input type="date" class="form-control" id="addTournoiEndDate" name="end_date" required>
                    </div>
                    <div class="mb-3">
                        <label for="addTournoiLocation" class="form-label">Location</label>
                        <input type="text" class="form-control" id="addTournoiLocation" name="tournoiLocation" required>
                    </div>
                    <div class="mb-3">
                        <label for="addTournoiReglements" class="form-label">Rules</label>
                        <textarea class="form-control" id="addTournoiReglements" name="reglements" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveAdd">Save</button>
            </div>
        </div>
    </div>
</div>
  <div class="fixed-plugin">
    <a class="fixed-plugin-button text-dark position-fixed px-3 py-2">
      <i class="fa fa-cog py-2"> </i>
    </a>
    <div class="card shadow-lg ">
      <div class="card-header pb-0 pt-3 ">
        <div class="float-start">
          <h5 class="mt-3 mb-0">Soft UI Configurator</h5>
          <p>See our dashboard options.</p>
        </div>
        <div class="float-end mt-4">
          <button class="btn btn-link text-dark p-0 fixed-plugin-close-button">
            <i class="fa fa-close"></i>
          </button>
        </div>
        <!-- End Toggle Button -->
      </div>
      <hr class="horizontal dark my-1">
      <div class="card-body pt-sm-3 pt-0">
        <!-- Sidebar Backgrounds -->
        <div>
          <h6 class="mb-0">Sidebar Colors</h6>
        </div>
        <a href="javascript:void(0)" class="switch-trigger background-color">
          <div class="badge-colors my-2 text-start">
            <span class="badge filter bg-primary active" data-color="primary" onclick="sidebarColor(this)"></span>
            <span class="badge filter bg-gradient-dark" data-color="dark" onclick="sidebarColor(this)"></span>
            <span class="badge filter bg-gradient-info" data-color="info" onclick="sidebarColor(this)"></span>
            <span class="badge filter bg-gradient-success" data-color="success" onclick="sidebarColor(this)"></span>
            <span class="badge filter bg-gradient-warning" data-color="warning" onclick="sidebarColor(this)"></span>
            <span class="badge filter bg-gradient-danger" data-color="danger" onclick="sidebarColor(this)"></span>
          </div>
        </a>
        <!-- Sidenav Type -->
        <div class="mt-3">
          <h6 class="mb-0">Sidenav Type</h6>
          <p class="text-sm">Choose between 2 different sidenav types.</p>
        </div>
        <div class="d-flex">
          <button class="btn btn-primary w-100 px-3 mb-2 active" data-class="bg-transparent" onclick="sidebarType(this)">Transparent</button>
          <button class="btn btn-primary w-100 px-3 mb-2 ms-2" data-class="bg-white" onclick="sidebarType(this)">White</button>
        </div>
        <p class="text-sm d-xl-none d-block mt-2">You can change the sidenav type just on desktop view.</p>
        <!-- Navbar Fixed -->
        <div class="mt-3">
          <h6 class="mb-0">Navbar Fixed</h6>
        </div>
        <div class="form-check form-switch ps-0">
          <input class="form-check-input mt-1 ms-auto" type="checkbox" id="navbarFixed" onclick="navbarFixed(this)">
        </div>
        <hr class="horizontal dark my-sm-4">
        <a class="btn bg-gradient-dark w-100" href="https://www.creative-tim.com/product/soft-ui-dashboard">Free Download</a>
        <a class="btn btn-outline-dark w-100" href="https://www.creative-tim.com/learning-lab/bootstrap/license/soft-ui-dashboard">View documentation</a>
        <div class="w-100 text-center">
          <a class="github-button" href="https://github.com/creativetimofficial/soft-ui-dashboard" data-icon="octicon-star" data-size="large" data-show-count="true" aria-label="Star creativetimofficial/soft-ui-dashboard on GitHub">Star</a>
          <h6 class="mt-3">Thank you for sharing!</h6>
          <a href="https://twitter.com/intent/tweet?text=Check%20Soft%20UI%20Dashboard%20made%20by%20%40CreativeTim%20%23webdesign%20%23dashboard%20%23bootstrap5&amp;url=https%3A%2F%2Fwww.creative-tim.com%2Fproduct%2Fsoft-ui-dashboard" class="btn btn-dark mb-0 me-2" target="_blank">
            <i class="fab fa-twitter me-1" aria-hidden="true"></i> Tweet
          </a>
          <a href="https://www.facebook.com/sharer/sharer.php?u=https://www.creative-tim.com/product/soft-ui-dashboard" class="btn btn-dark mb-0 me-2" target="_blank">
            <i class="fab fa-facebook-square me-1" aria-hidden="true"></i> Share
          </a>
        </div>
      </div>
    </div>
  </div>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <!--   Core JS Files   -->
  <script src="{{ asset('assets/js/core/popper.min.js') }}"></script>
  <script src="{{ asset('assets/js/core/bootstrap.min.js') }}"></script>
  <script src="{{ asset('assets/js/plugins/perfect-scrollbar.min.js') }}"></script>
  <script src="{{ asset('assets/js/plugins/smooth-scrollbar.min.js') }}"></script>
  <script>
    var win = navigator.platform.indexOf('Win') > -1;
    if (win && document.querySelector('#sidenav-scrollbar')) {
      var options = {
        damping: '0.5'
      }
      Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
    }

    // Delete tournoi confirmation modal
    document.addEventListener('DOMContentLoaded', function() {
      const deleteButtons = document.querySelectorAll('.delete-tournoi');
      const deleteModal = new bootstrap.Modal(document.getElementById('deleteTournoiModal'));
      const tournoiNameSpan = document.getElementById('tournoiName');
      const confirmDeleteBtn = document.getElementById('confirmDeleteTournoi');
      let currentTournoiId = null;
      let currentRow = null;

      deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
          const tournoiId = this.getAttribute('data-tournoi-id');
          const tournoiName = this.getAttribute('data-tournoi-nom');
          currentTournoiId = tournoiId;
          currentRow = this.closest('tr');
          tournoiNameSpan.textContent = tournoiName;
          deleteModal.show();
        });
      });

      confirmDeleteBtn.addEventListener('click', function() {
        if (currentTournoiId) {
          // Make AJAX call to delete the tournoi
          fetch(`/admin/tournoi/${currentTournoiId}/delete`, {
            method: 'DELETE',
            headers: {
              'X-Requested-With': 'XMLHttpRequest'
            }
          })
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            if (data.success) {
              // Remove the row from the table
              currentRow.remove();
              // Show success message
              const toastContainer = document.createElement('div');
              toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
              toastContainer.innerHTML = `
                <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
                  <div class="d-flex">
                    <div class="toast-body">
                      Tournament deleted successfully
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                  </div>
                </div>
              `;
              document.body.appendChild(toastContainer);
              const toast = new bootstrap.Toast(toastContainer.querySelector('.toast'));
              toast.show();
              // Remove the toast container after it's hidden
              toastContainer.querySelector('.toast').addEventListener('hidden.bs.toast', () => {
                toastContainer.remove();
              });
            } else {
              throw new Error(data.message || 'Failed to delete tournament');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            const toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
            toastContainer.innerHTML = `
              <div class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                  <div class="toast-body">
                    ${error.message}
                  </div>
                  <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
              </div>
            `;
            document.body.appendChild(toastContainer);
            const toast = new bootstrap.Toast(toastContainer.querySelector('.toast'));
            toast.show();
            // Remove the toast container after it's hidden
            toastContainer.querySelector('.toast').addEventListener('hidden.bs.toast', () => {
              toastContainer.remove();
            });
          })
          .finally(() => {
            deleteModal.hide();
          });
        }
      });
    });

    // Edit tournoi functionality
    document.addEventListener('DOMContentLoaded', function() {
      const editButtons = document.querySelectorAll('.edit-tournoi');
      const editModal = new bootstrap.Modal(document.getElementById('editTournoiModal'));
      const saveChangesBtn = document.getElementById('saveTournoiChanges');
      let currentRow = null;

      editButtons.forEach(button => {
        button.addEventListener('click', function() {
          const tournoiId = this.getAttribute('data-tournoi-id');
          const tournoiName = this.getAttribute('data-tournoi-nom');
          const tournoiFormat = this.getAttribute('data-tournoi-format');
          const tournoiSportType = this.getAttribute('data-tournoi-sporttype');
          const tournoiNbEquipe = this.getAttribute('data-tournoi-nbequipe');
          const tournoiStatus = this.getAttribute('data-tournoi-status');
          
          currentRow = this.closest('tr');
          
          // Populate the form
          document.getElementById('editTournoiId').value = tournoiId;
          document.getElementById('editTournoiName').value = tournoiName;
          document.getElementById('editTournoiFormat').value = tournoiFormat;
          document.getElementById('editTournoiSportType').value = tournoiSportType;
          document.getElementById('editTournoiNbEquipe').value = tournoiNbEquipe;
          document.getElementById('editTournoiStatus').value = tournoiStatus;
          
          editModal.show();
        });
      });

      saveChangesBtn.addEventListener('click', function() {
        const tournoiId = document.getElementById('editTournoiId').value;
        const formData = {
          nom: document.getElementById('editTournoiName').value,
          format: document.getElementById('editTournoiFormat').value,
          sportType: document.getElementById('editTournoiSportType').value,
          nbEquipe: document.getElementById('editTournoiNbEquipe').value,
          status: document.getElementById('editTournoiStatus').value
        };

        // Make AJAX call to update the tournoi
        fetch(`/admin/tournoi/${tournoiId}/edit`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify(formData)
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            // Update the row with new data
            const row = currentRow;
            row.querySelector('h6.mb-0.text-sm').textContent = data.tournoi.nom;
            row.querySelector('p.text-sm.font-weight-bold.mb-0').textContent = data.tournoi.format;
            row.querySelector('td:nth-child(3) span').textContent = data.tournoi.sportType;
            row.querySelector('td:nth-child(4) p').textContent = data.tournoi.nbEquipe;
            row.querySelector('td:nth-child(5) span').textContent = data.tournoi.status;
            
            // Update the data attributes on the edit button
            const editButton = row.querySelector('.edit-tournoi');
            editButton.setAttribute('data-tournoi-nom', data.tournoi.nom);
            editButton.setAttribute('data-tournoi-format', data.tournoi.format);
            editButton.setAttribute('data-tournoi-sporttype', data.tournoi.sportType);
            editButton.setAttribute('data-tournoi-nbequipe', data.tournoi.nbEquipe);
            editButton.setAttribute('data-tournoi-status', data.tournoi.status);
            
            // Show success message
            const toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
            toastContainer.innerHTML = `
              <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                  <div class="toast-body">
                    Tournament updated successfully
                  </div>
                  <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
              </div>
            `;
            document.body.appendChild(toastContainer);
            const toast = new bootstrap.Toast(toastContainer.querySelector('.toast'));
            toast.show();
            // Remove the toast container after it's hidden
            toastContainer.querySelector('.toast').addEventListener('hidden.bs.toast', () => {
              toastContainer.remove();
            });
          } else {
            throw new Error(data.message || 'Failed to update tournament');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          const toastContainer = document.createElement('div');
          toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
          toastContainer.innerHTML = `
            <div class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
              <div class="d-flex">
                <div class="toast-body">
                  ${error.message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
              </div>
            </div>
          `;
          document.body.appendChild(toastContainer);
          const toast = new bootstrap.Toast(toastContainer.querySelector('.toast'));
          toast.show();
          // Remove the toast container after it's hidden
          toastContainer.querySelector('.toast').addEventListener('hidden.bs.toast', () => {
            toastContainer.remove();
          });
        })
        .finally(() => {
          editModal.hide();
        });
      });
    });

    // Add tournoi modal
    document.addEventListener('DOMContentLoaded', function() {
      const addButton = document.getElementById('addTournoiButton');
      const addModal = new bootstrap.Modal(document.getElementById('addTournoiModal'));
      const addForm = document.getElementById('addTournoiForm');
      const saveAddBtn = document.getElementById('saveAdd');

      addButton.addEventListener('click', function() {
        addForm.reset();
        addModal.show();
      });

      saveAddBtn.addEventListener('click', function() {
        const formData = {
            nom: document.getElementById('addTournoiName').value,
            format: document.getElementById('addTournoiFormat').value,
            sportType: document.getElementById('addTournoiSportType').value,
            nbEquipe: document.getElementById('addTournoiNbEquipe').value,
            status: document.getElementById('addTournoiStatus').value,
            start_date: document.getElementById('addTournoiStartDate').value,
            end_date: document.getElementById('addTournoiEndDate').value,
            tournoiLocation: document.getElementById('addTournoiLocation').value,
            reglements: document.getElementById('addTournoiReglements').value
        };
        
        fetch('/admin/tournoi/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(formData)
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => {
                    throw new Error(err.message || 'Network response was not ok');
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Show success message
                const toastContainer = document.createElement('div');
                toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
                toastContainer.innerHTML = `
                  <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                      <div class="toast-body">
                        Tournament added successfully
                      </div>
                      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                  </div>
                `;
                document.body.appendChild(toastContainer);
                const toast = new bootstrap.Toast(toastContainer.querySelector('.toast'));
                toast.show();
                
                // Reload the page after a short delay
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                throw new Error(data.message || 'Failed to add tournament');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            // Show error message
            const toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
            toastContainer.innerHTML = `
              <div class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                  <div class="toast-body">
                    ${error.message}
                  </div>
                  <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
              </div>
            `;
            document.body.appendChild(toastContainer);
            const toast = new bootstrap.Toast(toastContainer.querySelector('.toast'));
            toast.show();
            // Remove the toast container after it's hidden
            toastContainer.querySelector('.toast').addEventListener('hidden.bs.toast', () => {
              toastContainer.remove();
            });
        })
        .finally(() => {
            addModal.hide();
        });
      });
    });
  </script>
  <!-- Github buttons -->
  <script async defer src="https://buttons.github.io/buttons.js"></script>
  <!-- Control Center for Soft Dashboard: parallax effects, scripts for the example pages etc -->
  <script src="{{ asset('assets/js/soft-ui-dashboard.min.js?v=1.1.0') }}"></script>
{% endblock %}