{% extends 'admin_dashboard/dashboard.html.twig' %}

{% block body %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header pb-0">
                    <h6>Edit Product</h6>
                </div>
                <div class="card-body">
                    {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}
                        <div class="mb-3">
                            {{ form_label(form.nameproduct) }}
                            {{ form_widget(form.nameproduct, { 
                                'attr': {
                                    'class': form_errors(form.nameproduct) ? 'form-control is-invalid' : 'form-control'
                                }
                            }) }}
                            {% if form_errors(form.nameproduct) %}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.nameproduct) }}
                                </div>
                            {% else %}
                                <small class="form-text text-muted">Product name must be between 3 and 100 characters</small>
                            {% endif %}
                        </div>
                        <div class="mb-3">
                            {{ form_label(form.priceproduct) }}
                            {{ form_widget(form.priceproduct, { 
                                'attr': {
                                    'class': form_errors(form.priceproduct) ? 'form-control is-invalid' : 'form-control'
                                }
                            }) }}
                            {% if form_errors(form.priceproduct) %}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.priceproduct) }}
                                </div>
                            {% else %}
                                <small class="form-text text-muted">Price must be greater than 0</small>
                            {% endif %}
                        </div>
                        <div class="mb-3">
                            {{ form_label(form.stock) }}
                            {{ form_widget(form.stock, { 
                                'attr': {
                                    'class': form_errors(form.stock) ? 'form-control is-invalid' : 'form-control'
                                }
                            }) }}
                            {% if form_errors(form.stock) %}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.stock) }}
                                </div>
                            {% else %}
                                <small class="form-text text-muted">Stock quantity must be a positive number</small>
                            {% endif %}
                        </div>
                        <div class="mb-3">
                            {{ form_label(form.category) }}
                            {{ form_widget(form.category, { 
                                'attr': {
                                    'class': form_errors(form.category) ? 'form-control is-invalid' : 'form-control'
                                }
                            }) }}
                            {% if form_errors(form.category) %}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.category) }}
                                </div>
                            {% endif %}
                        </div>
                        <div class="mb-3">
                            {{ form_label(form.image) }}
                            {{ form_widget(form.image, { 
                                'attr': {
                                    'class': form_errors(form.image) ? 'form-control is-invalid' : 'form-control'
                                }
                            }) }}
                            {% if form_errors(form.image) %}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.image) }}
                                </div>
                            {% else %}
                                <small class="form-text text-muted">Upload a product image (JPG, JPEG, PNG)</small>
                                {% if product.image %}
                                    <div class="mt-2">
                                        <img src="{{ asset('uploads/products/' ~ product.image) }}" alt="{{ product.nameproduct }}" class="img-thumbnail" style="max-height: 150px;">
                                        <p class="text-muted mt-1">Current image: {{ product.image }}</p>
                                    </div>
                                {% endif %}
                            {% endif %}
                        </div>
                        <div class="mb-3">
                            {{ form_label(form.productdescription) }}
                            {{ form_widget(form.productdescription, { 
                                'attr': {
                                    'class': form_errors(form.productdescription) ? 'form-control is-invalid' : 'form-control',
                                    'rows': 5
                                }
                            }) }}
                            {% if form_errors(form.productdescription) %}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.productdescription) }}
                                </div>
                            {% else %}
                                <small class="form-text text-muted">Provide a detailed description of at least 10 characters</small>
                            {% endif %}
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="generate_ai_description" name="generate_ai_description">
                            <label class="form-check-label" for="generate_ai_description">
                                <strong>Generate AI Description</strong> - Let AI create a product description based on the image and product details
                            </label>
                            <div id="description_status" class="mt-2" style="display: none;"></div>
                            <div class="form-text">
                                <small>Check this box to immediately generate a description based on the product image and details.</small>
                            </div>
                        </div>
                        <button class="btn btn-success">Save</button>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const productForm = document.querySelector('form[name="product"]');
        const generateCheckbox = document.getElementById('generate_ai_description');
        const descriptionField = document.getElementById('product_productdescription');
        const nameField = document.getElementById('product_nameproduct');
        const categoryField = document.getElementById('product_category');
        const imageField = document.getElementById('product_image');
        const statusDiv = document.getElementById('description_status');
        
        // Custom validation function
        function validateForm(event) {
            let isValid = true;
            let errorMessages = {};
            
            // Validate product name (3-100 characters)
            if (!nameField.value.trim()) {
                errorMessages.name = 'Product name is required';
                isValid = false;
            } else if (nameField.value.trim().length < 3) {
                errorMessages.name = 'Product name must be at least 3 characters';
                isValid = false;
            } else if (nameField.value.trim().length > 100) {
                errorMessages.name = 'Product name cannot exceed 100 characters';
                isValid = false;
            }
            
            // Validate price (must be positive)
            const priceField = document.getElementById('product_priceproduct');
            if (!priceField.value.trim()) {
                errorMessages.price = 'Price is required';
                isValid = false;
            } else if (parseInt(priceField.value) <= 0) {
                errorMessages.price = 'Price must be a positive number';
                isValid = false;
            }
            
            // Validate description (if provided, must be at least 10 chars)
            if (descriptionField.value.trim() && descriptionField.value.trim().length < 10) {
                errorMessages.description = 'Description must be at least 10 characters';
                isValid = false;
            }
            
            // If validation fails, prevent form submission and show errors
            if (!isValid) {
                event.preventDefault();
                
                // Display error messages
                displayErrors(errorMessages);
                return false;
            }
            
            return true;
        }
        
        // Display error messages next to fields
        function displayErrors(errors) {
            // Clear previous errors
            document.querySelectorAll('.validation-error').forEach(el => el.remove());
            
            // Reset field styling
            const priceField = document.getElementById('product_priceproduct');
            [nameField, priceField, descriptionField].forEach(field => {
                field.classList.remove('is-invalid');
            });
            
            // Display new errors
            if (errors.name) {
                nameField.classList.add('is-invalid');
                addErrorMessage(nameField, errors.name);
            }
            
            if (errors.price) {
                priceField.classList.add('is-invalid');
                addErrorMessage(priceField, errors.price);
            }
            
            if (errors.description) {
                descriptionField.classList.add('is-invalid');
                addErrorMessage(descriptionField, errors.description);
            }
        }
        
        // Add error message after an input field
        function addErrorMessage(field, message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'validation-error invalid-feedback';
            errorDiv.textContent = message;
            field.parentNode.appendChild(errorDiv);
        }
        
        // Add form submission handler with validation
        productForm.addEventListener('submit', function(event) {
            // Validate form first
            if (!validateForm(event)) {
                return false;
            }
            
            // If validation passes, continue with the original logic
            event.preventDefault();
            
            // Make sure the description field has the latest value
            console.log('Submitting form with description: ' + descriptionField.value);
            
            // Create a hidden input for the description if it doesn't exist
            let hiddenInput = document.getElementById('hidden_description');
            if (!hiddenInput) {
                hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'product[productdescription]';
                hiddenInput.id = 'hidden_description';
                productForm.appendChild(hiddenInput);
            }
            
            // Set the value of the hidden input
            hiddenInput.value = descriptionField.value;
            
            // Submit the form
            productForm.submit();
        });
        
        // Current product image if any
        const currentImage = '{{ product.image }}';
        
        // Generate description when checkbox is clicked
        generateCheckbox.addEventListener('change', function() {
            if (this.checked) {
                generateDescription();
            }
        });
        
        function generateDescription() {
            statusDiv.style.display = 'block';
            statusDiv.innerHTML = '<div class="alert alert-info">Generating description...</div>';
            
            const formData = new FormData();
            formData.append('name', nameField.value);
            formData.append('category', categoryField.value);
            
            // If we have a new uploaded file, we need to upload it first
            if (imageField.files && imageField.files[0]) {
                const fileUploadData = new FormData();
                fileUploadData.append('image', imageField.files[0]);
                
                // First upload the image
                fetch('{{ path("upload_temp_image") }}', {
                    method: 'POST',
                    body: fileUploadData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Now generate the description with the uploaded image
                        formData.append('image', data.filename);
                        callDescriptionAPI(formData);
                    } else {
                        // If image upload failed, try with existing image
                        if (currentImage) {
                            formData.append('image', currentImage);
                        }
                        callDescriptionAPI(formData);
                    }
                })
                .catch(error => {
                    console.error('Error uploading image:', error);
                    // Try with existing image
                    if (currentImage) {
                        formData.append('image', currentImage);
                    }
                    callDescriptionAPI(formData);
                });
            } else if (currentImage) {
                // Use existing image
                formData.append('image', currentImage);
                callDescriptionAPI(formData);
            } else {
                // No image, use text-based description
                callDescriptionAPI(formData);
            }
        }
        
        function callDescriptionAPI(formData) {
            fetch('{{ path("generate_product_description") }}', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the description field
                    descriptionField.value = data.description;
                    let tagsHtml = '';
                    if (data.tags && data.tags.length > 0) {
                        tagsHtml = '<div class="mt-2"><strong>Detected tags:</strong> ' + data.tags.join(', ') + '</div>';
                    }
                    statusDiv.innerHTML = '<div class="alert alert-success">Description generated successfully!</div>' + tagsHtml;
                    
                    // Hide the status after 3 seconds
                    setTimeout(() => {
                        statusDiv.style.display = 'none';
                    }, 3000);
                } else {
                    statusDiv.innerHTML = '<div class="alert alert-danger">Failed to generate description. Please try again.</div>';
                }
            })
            .catch(error => {
                console.error('Error generating description:', error);
                statusDiv.innerHTML = '<div class="alert alert-danger">Error generating description. Please try again.</div>';
            });
        }
    });
</script>
{% endblock %}
